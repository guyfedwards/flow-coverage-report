{"version":3,"sources":["../../src/lib/index.js"],"names":["opts","projectDir","tmpDirPath","process","env","VERBOSE","console","log","flowCommandPath","flowCommandTimeout","DEFAULT_FLOW_TIMEOUT","outputDir","path","isAbsolute","resolve","join","globIncludePatterns","globExcludePatterns","concurrentFiles","Array","isArray","Promise","reject","TypeError","length","coverageData","reportResults","reportTypes","indexOf","push","reportJSON","generate","reportText","reportBadge","reportHTML","then","all","generateFlowCoverageReport"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\n// @flow\n\nimport path from 'path';\n\nimport {DEFAULT_FLOW_TIMEOUT} from './cli/config';\nimport {collectFlowCoverage} from './flow';\nimport {withTmpDir} from './promisified';\nimport reportHTML from './report-html';\nimport reportBadge from './report-badge';\nimport reportJSON from './report-json';\nimport reportText from './report-text';\n\n// eslint-disable-next-line no-duplicate-imports\nimport type {ConfigParams, ReportType} from './cli/config';\n// eslint-disable-next-line no-duplicate-imports\nimport type {FlowCoverageSummaryData} from './flow';\n\nexport type FlowCoverageReportType = ReportType;\n\nexport type FlowCoverageReportOptions = {\n  ...ConfigParams,\n  log?: Function\n};\n\n// User Scenarios\n// 1. generate text report from a project dir\n// 2. generate text report from a project dir and save json to file\n// 3. generate text report from a project dir and html report\n// 4. generate text/html report from a saved json file\n// 5. set a custom threshold\n// 6. set a custom output dir\n// 7. usa a saved json file to compute coverage trend (and fail on negative trends)\n\nexport default async function generateFlowCoverageReport(opts: FlowCoverageReportOptions) {\n  // Apply defaults to options.\n  const projectDir = opts.projectDir;\n\n  let tmpDirPath: ?string;\n\n  if (process.env.VERBOSE && process.env.VERBOSE === 'DUMP_JSON') {\n    tmpDirPath = await withTmpDir('flow-coverage-report');\n    console.log(`Verbose DUMP_JSON mode enabled (${tmpDirPath})`);\n  }\n\n  opts.flowCommandPath = opts.flowCommandPath || 'flow';\n  opts.flowCommandTimeout = opts.flowCommandTimeout || DEFAULT_FLOW_TIMEOUT; // Defaults to 15s\n  opts.outputDir = opts.outputDir || './flow-coverage';\n  opts.outputDir = path.isAbsolute(opts.outputDir) ?\n    opts.outputDir : path.resolve(path.join(projectDir, opts.outputDir));\n  opts.globIncludePatterns = opts.globIncludePatterns || [];\n  opts.globExcludePatterns = opts.globExcludePatterns || [];\n  opts.concurrentFiles = opts.concurrentFiles || 1;\n\n  if (!Array.isArray(opts.globExcludePatterns)) {\n    opts.globExcludePatterns = [opts.globExcludePatterns];\n  }\n\n  // Apply validation checks.\n  if (!projectDir) {\n    return Promise.reject(new TypeError('projectDir option is mandatory'));\n  }\n\n  if (opts.globIncludePatterns.length === 0) {\n    return Promise.reject(new TypeError('empty globIncludePatterns option'));\n  }\n\n  const coverageData: FlowCoverageSummaryData = await collectFlowCoverage(\n    opts, tmpDirPath);\n\n  const reportResults = [];\n  const reportTypes = opts.reportTypes || ['text'];\n\n  if (reportTypes.indexOf('json') >= 0) {\n    reportResults.push(reportJSON.generate(coverageData, opts));\n  }\n\n  if (reportTypes.indexOf('text') >= 0) {\n    reportResults.push(reportText.generate(coverageData, opts));\n  }\n\n  // Run the badge reporter implicitly if the html report has been included.\n  if (reportTypes.indexOf('badge') >= 0 || reportTypes.indexOf('html') >= 0) {\n    reportResults.push(reportBadge.generate(coverageData, opts));\n  }\n\n  if (reportTypes.indexOf('html') >= 0) {\n    reportResults.push(reportHTML.generate(coverageData, opts).then(() => {\n      console.log(`View generated HTML Report at file://${opts.outputDir}/index.html`);\n    }));\n  }\n\n  return Promise.all(reportResults).then(() => {\n    return [coverageData, opts];\n  });\n}\n"]}