{"version":3,"sources":["../../src/lib/report-text.js"],"names":["renderTextReport","coverageData","opts","print","log","console","bind","filesTable","Table","leftPadding","rightPadding","borderStyle","push","row","Object","keys","files","sort","filename","data","annotation","covered","expressions","covered_count","uncovered","uncovered_count","percent","isError","rowColor","isFlow","threshold","attrRange","color","column","align","summaryTablePre","thresholdValue","thresholdUncovered","globIncludePatterns","join","globExcludePatterns","concurrentFiles","generatedAt","flowStatus","flowVersion","passed","errors","length","summaryTable","summaryTotal","summaryPercent","withinThreshold","summaryColor","path","basename","projectDir","waitForDrain","Promise","process","stdout","once","resolve","flushed","write","String","generateFlowCoverageReportText","render","generate"],"mappings":"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","file":"report-text.js","sourcesContent":["'use strict';\n\n// @flow\n\nimport path from 'path';\nimport Table from 'terminal-table';\n\nimport type {FlowCoverageSummaryData} from './flow';\nimport type {FlowCoverageReportOptions} from './index';\n\nfunction renderTextReport(\n  coverageData: FlowCoverageSummaryData,\n  opts: FlowCoverageReportOptions\n): Promise<void> {\n  const print = opts.log || console.log.bind(console);\n\n  const filesTable = new Table({\n    leftPadding: 1,\n    rightPadding: 1,\n    borderStyle: 2\n  });\n  filesTable.push([\n    'filename',\n    'annotation',\n    'percent',\n    'total',\n    'covered',\n    'uncovered'\n  ]);\n\n  let row = 0;\n  for (const filename of Object.keys(coverageData.files).sort()) {\n    row += 1;\n    const data = coverageData.files[filename];\n\n    const annotation = data.annotation || 'no flow';\n    const covered = data.expressions.covered_count;\n    const uncovered = data.expressions.uncovered_count;\n    const {percent} = data;\n\n    filesTable.push([\n      filename,\n      annotation,\n      data.isError ? '\\u26A0 Error' : percent + ' %',\n      covered + uncovered,\n      covered,\n      uncovered\n    ]);\n\n    let rowColor;\n    if (data.isFlow && percent >= (opts.threshold || 80)) {\n      rowColor = 'green';\n    } else {\n      rowColor = 'red';\n    }\n\n    if (data.isError) {\n      rowColor = 'red';\n    }\n\n    filesTable.attrRange({row: [row]}, {\n      color: rowColor\n    });\n  }\n\n  filesTable.attrRange({column: [1, 5]}, {\n    align: 'right'\n  });\n\n  const summaryTablePre = new Table({\n    leftPadding: 1,\n    rightPadding: 1,\n    borderStyle: 2\n  });\n\n  const thresholdValue = coverageData.thresholdUncovered ?\n    ['thresholdUncovered', coverageData.thresholdUncovered] :\n    ['threshold', coverageData.threshold];\n\n  summaryTablePre.push([\n    'included glob patterns:',\n    coverageData.globIncludePatterns.join(', ')\n  ]);\n  summaryTablePre.push([\n    'excluded glob patterns:',\n    (coverageData.globExcludePatterns || []).join(', ')\n  ]);\n  summaryTablePre.push(thresholdValue);\n  summaryTablePre.push([\n    'concurrent files:',\n    coverageData.concurrentFiles\n  ]);\n\n  summaryTablePre.push(['generated at:', coverageData.generatedAt]);\n  summaryTablePre.push(['flow version:', coverageData.flowStatus.flowVersion]);\n  summaryTablePre.push([\n    'flow check passed:',\n    (coverageData.flowStatus.passed ? 'yes' : 'no') + ' (' +\n    (coverageData.flowStatus.errors.length >= 50 ?\n      ' >= 50' : coverageData.flowStatus.errors.length) +\n    ' errors)'\n  ]);\n  summaryTablePre.attrRange({row: [6]}, {\n    color: coverageData.flowStatus.passed ? 'green' : 'red'\n  });\n\n  summaryTablePre.attrRange({column: [0, 1]}, {\n    align: 'right'\n  });\n\n  const summaryTable = new Table({\n    leftPadding: 1,\n    rightPadding: 1,\n    borderStyle: 2\n  });\n\n  summaryTable.push(['project', 'percent', 'total', 'covered', 'uncovered']);\n  const summaryTotal = coverageData.covered_count + coverageData.uncovered_count;\n  const summaryPercent = coverageData.percent;\n\n  let withinThreshold;\n  if (opts.thresholdUncovered) {\n    withinThreshold = coverageData.uncovered_count <= opts.thresholdUncovered;\n  } else {\n    withinThreshold = summaryPercent >= opts.threshold;\n  }\n\n  let summaryColor;\n  if (withinThreshold) {\n    summaryColor = 'green';\n  } else {\n    summaryColor = 'red';\n  }\n\n  summaryTable.push([\n    path.basename(opts.projectDir),\n    summaryPercent + ' %',\n    summaryTotal,\n    coverageData.covered_count,\n    coverageData.uncovered_count\n  ]);\n\n  summaryTable.attrRange({row: [1]}, {color: summaryColor});\n\n  summaryTable.attrRange({column: [1, 5]}, {\n    align: 'right'\n  });\n\n  const waitForDrain = new Promise(resolve => {\n    process.stdout.once('drain', resolve);\n\n    const flushed = process.stdout.write('');\n\n    if (flushed || opts.log) {\n      resolve();\n    }\n  });\n\n  print(String(filesTable));\n  print(String(summaryTablePre));\n  print(String(summaryTable));\n\n  return waitForDrain;\n}\n\nfunction generateFlowCoverageReportText(\n  coverageData: FlowCoverageSummaryData,\n  opts: Object\n): Promise<void> {\n  return renderTextReport(coverageData, opts);\n}\n\nexport default {\n  render: renderTextReport,\n  generate: generateFlowCoverageReportText\n};\n"]}