{"version":3,"sources":["../../../src/lib/cli/index.js"],"names":["exports","run","args","process","argv","err","UsageError","console","error","message","stack","exit","then","coverageSummaryData","percent","threshold","thresholdUncovered","uncovered_count","catch"],"mappings":";;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AAEAA,QAAQC,GAAR,GAAc,YAAM;AAClB,MAAIC,OAAO,oBAAYC,QAAQC,IAApB,CAAX;;AAEA,MAAI;AACFF,WAAO,wBAAWA,IAAX,CAAP;AACA,gCAAeA,IAAf;AACD,GAHD,CAGE,OAAOG,GAAP,EAAY;AACZ,QAAIA,eAAeC,kBAAnB,EAA+B;AAC7BC,cAAQC,KAAR,CAAc,sBAAd,EAAsCH,IAAII,OAA1C;AACD,KAFD,MAEO;AACLF,cAAQC,KAAR,CAAc,2BAA2BH,GAA3B,GAAiC,GAAjC,GAAuCA,IAAIK,KAAzD;AACD;AACDP,YAAQQ,IAAR,CAAa,GAAb,EANY,CAMO;AACpB;;AAED,gDAA+BT,IAA/B,GAAsCU,IAAtC,CAA2C,gBAA2B;AAAA;AAAA,QAAzBC,mBAAyB;;AACpE;AADoE,QAE7DC,OAF6D,GAEFD,mBAFE,CAE7DC,OAF6D;AAAA,QAEpDC,SAFoD,GAEFF,mBAFE,CAEpDE,SAFoD;AAAA,QAEzCC,kBAFyC,GAEFH,mBAFE,CAEzCG,kBAFyC;AAAA,QAErBC,eAFqB,GAEFJ,mBAFE,CAErBI,eAFqB;;;AAIpE,QAAID,sBAAsBC,kBAAkBD,kBAA5C,EAAgE;AAChE;AACET,cAAQC,KAAR;AAGAL,cAAQQ,IAAR,CAAa,CAAb,EAL8D,CAK7C;AAClB;AACD,QAAI,CAACK,kBAAD,IAAuBF,UAAUC,SAArC,EAAgD;AAC9CR,cAAQC,KAAR,qBACoBM,OADpB,0CACgEC,SADhE;AAGAZ,cAAQQ,IAAR,CAAa,CAAb,EAJ8C,CAI7B;AAClB;AACF,GAjBD,EAiBGO,KAjBH,CAiBS,eAAO;AACdX,YAAQC,KAAR,CAAc,kDAAkDH,GAAlD,GAAwD,GAAxD,GAA8DA,IAAIK,KAAhF;AACAP,YAAQQ,IAAR,CAAa,GAAb,EAFc,CAEK;AACpB,GApBD;AAqBD,CApCD","file":"index.js","sourcesContent":["// @flow\n\nimport generateFlowCoverageReport from '../../lib';\nimport processArgv from './args';\nimport {loadConfig, validateConfig, UsageError} from './config';\n\nexports.run = () => {\n  let args = processArgv(process.argv);\n\n  try {\n    args = loadConfig(args);\n    validateConfig(args);\n  } catch (err) {\n    if (err instanceof UsageError) {\n      console.error('Configuration error:', err.message);\n    } else {\n      console.error('Unexpected exception: ' + err + ' ' + err.stack);\n    }\n    process.exit(255); // eslint-disable-line unicorn/no-process-exit\n  }\n\n  generateFlowCoverageReport({...args}).then(([coverageSummaryData]) => {\n    /* eslint-disable camelcase */\n    const {percent, threshold, thresholdUncovered, uncovered_count} = coverageSummaryData;\n\n    if (thresholdUncovered && uncovered_count > thresholdUncovered) {\n    /* eslint-enable camelcase */\n      console.error(\n        `Flow Coverage: uncovered count is higher than the uncoveredThreshold`\n      );\n      process.exit(2); // eslint-disable-line unicorn/no-process-exit\n    }\n    if (!thresholdUncovered && percent < threshold) {\n      console.error(\n        `Flow Coverage: ${percent}% is below the required threshold ${threshold}%`\n      );\n      process.exit(2); // eslint-disable-line unicorn/no-process-exit\n    }\n  }).catch(err => {\n    console.error('Error while generating Flow Coverage Report: ' + err + ' ' + err.stack);\n    process.exit(255); // eslint-disable-line unicorn/no-process-exit\n  });\n};\n"]}